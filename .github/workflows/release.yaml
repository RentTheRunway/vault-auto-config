name: Release

on:
  push:
    tags:
    - 'v*' # Version tags, e.g. v1.0.0

jobs:
  create_release:
    name: Create a Release Version from Tag
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: ${{ github.event.release.tag_name }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build_push_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.ARTIFACTORY_DEPLOY_USER }}
          password: ${{ secrets.ARTIFACTORY_DEPLOY_PASSWORD }}
          registry: artifactory.rtr.cloud
          repository: docker/vault-auto-config
          tags: latest,${{ github.event.release.tag_name }}

  upload_assets:
    name: Build and Upload Release Assets
    runs-on: ubuntu-latest
    needs: create_release

    strategy:
      matrix:
        release:
          - os: darwin
            arch: amd64
            ext:

          - os: linux
            arch: amd64
            ext:

          - os: windows
            arch: amd64
            ext: .exe

    env:
      GOOS: ${{ matrix.release.os }}
      GOARCH: ${{ matrix.release.arch }}
      BINARY: vault-auto-config-${{ matrix.release.os }}-${{ matrix.release.arch }}${{ matrix.release.ext }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x

      - name: Build Binary ${{ env.BINARY }}
        run: go build ./cmd/vault-auto-config -o ${{ env.BINARY }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.BINARY }}
          asset_name: ${{ env.BINARY }}
          asset_content_type: application/octet-stream
